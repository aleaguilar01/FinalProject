generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id String @id @default(uuid())
  provider Provider?
  providerId String?
  email String @unique
  profilePicture String?
  password String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userbook UserBook[]
}
enum Provider {
  GOOGLE
}

model Playlist {
  id String @id @default(uuid())
  playlistId String @unique
  playlist String
  image String?
  description String? @db.Text
  uri String
  createdAt   DateTime?         @default(now())
  updatedAt   DateTime?         @updatedAt
  
  userBooks   UserBookPlaylist[]
}

model UserBookPlaylist {
  id String @id @default(uuid())
  userBook UserBook @relation(fields: [userBookId], references: [id])
  userBookId String
  playlist Playlist @relation(fields: [playlistId], references: [id])
  playlistId String
  isFavorite Boolean @default(false)

  createdAt   DateTime?     @default(now())
  updatedAt   DateTime?     @updatedAt
}

model UserBook {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  book Book @relation(fields: [bookId], references: [isbn])
  bookId String
  readingStatus ReadingStatus @default(WANT_TO_READ)
  rating Int?
  isFavorite Boolean? @default(false)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  playlists UserBookPlaylist[] // Create relationship with join table
}
enum ReadingStatus {
  WANT_TO_READ
  READING
  READ
  RE_READING
  DID_NOT_FINISH
}

model Book {
  isbn String @id
  title String
  author String
  rating Float?
  publishedYear Int?
  numberOfPages Int?
  firstSentence String?
  imageUrl String?
  users UserBook[]
}

